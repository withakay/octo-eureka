name: Environment Secrets Workflow

on:
  workflow_dispatch:

jobs:
  foo-job:
    name: Access Foo Environment
    runs-on: ubuntu-latest
    environment: Foo
    outputs:
      foo_secret_hash: ${{ steps.export-secrets.outputs.secret_hash }}
      foo_variable_value: ${{ vars.FOO_VARIABLE }}

    steps:
      - name: Validate and hash secrets
        id: export-secrets
        run: |
          # Define hash function - base64 encode with simple transformation
          SALT="github-workflow-salt-$(date +%Y)"
          VALUE="${{ secrets.FOO_SECRET }}$SALT"
          # Base64 encode and add simple transformation to obscure it
          SECRET_HASH=$(echo -n "$VALUE" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')

          # Validate secret
          if [[ "${{ secrets.FOO_SECRET }}" != "FOO" ]]; then
            echo "‚ùå FOO_SECRET does not match expected value"
            exit 1
          else
            echo "‚úÖ FOO_SECRET validated"
          fi

          # Output the hashed/obfuscated value
          echo "secret_hash=$SECRET_HASH" >> $GITHUB_OUTPUT

      - name: Debug output (sanitized)
        run: |
          echo "FOO_SECRET has been validated and hashed"
          echo "FOO_VARIABLE = ${{ vars.FOO_VARIABLE }}"

  bar-job:
    name: Access Bar Environment
    runs-on: ubuntu-latest
    environment: Bar
    outputs:
      bar_secret_hash: ${{ steps.export-secrets.outputs.secret_hash }}
      bar_variable_value: ${{ vars.BAR_VARIABLE }}

    steps:
      - name: Validate and hash secrets
        id: export-secrets
        run: |
          # Define hash function - base64 encode with simple transformation
          SALT="github-workflow-salt-$(date +%Y)"
          VALUE="${{ secrets.BAR_SECRET }}$SALT"
          # Base64 encode and add simple transformation to obscure it
          SECRET_HASH=$(echo -n "$VALUE" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')

          # Validate secret
          if [[ "${{ secrets.BAR_SECRET }}" != "BAR" ]]; then
            echo "‚ùå BAR_SECRET does not match expected value"
            exit 1
          else
            echo "‚úÖ BAR_SECRET validated"
          fi

          # Output the hashed/obfuscated value
          echo "secret_hash=$SECRET_HASH" >> $GITHUB_OUTPUT

      - name: Debug output (sanitized)
        run: |
          echo "BAR_SECRET has been validated and hashed"
          echo "BAR_VARIABLE = ${{ vars.BAR_VARIABLE }}"

  verify-job:
    name: Verify Environment Values
    needs: [foo-job, bar-job]
    runs-on: ubuntu-latest
    steps:
      - name: Generate expected hashes
        id: generate-hashes
        run: |
          # Use the same hashing approach for consistency
          SALT="github-workflow-salt-$(date +%Y)"

          # Hash the FOO expected value
          FOO_VALUE="FOO$SALT"
          FOO_EXPECTED_HASH=$(echo -n "$FOO_VALUE" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')

          # Hash the BAR expected value
          BAR_VALUE="BAR$SALT"
          BAR_EXPECTED_HASH=$(echo -n "$BAR_VALUE" | base64 | tr 'A-Za-z' 'N-ZA-Mn-za-m')

          # Save expected hashes for later steps
          echo "foo_expected_hash=$FOO_EXPECTED_HASH" >> $GITHUB_OUTPUT
          echo "bar_expected_hash=$BAR_EXPECTED_HASH" >> $GITHUB_OUTPUT

      - name: Verify Foo values
        run: |
          # Compare the hash received from foo-job with expected hash
          if [[ "${{ needs.foo-job.outputs.foo_secret_hash }}" == "${{ steps.generate-hashes.outputs.foo_expected_hash }}" ]]; then
            echo "‚úÖ FOO_SECRET verified correctly (hash matches)"
          else
            echo "‚ùå FOO_SECRET verification failed"
            exit 1
          fi

          if [[ "${{ needs.foo-job.outputs.foo_variable_value }}" == "FOO-VAR" ]]; then
            echo "‚úÖ FOO_VARIABLE verified correctly"
          else
            echo "‚ùå FOO_VARIABLE verification failed"
            exit 1
          fi

      - name: Verify Bar values
        run: |
          # Compare the hash received from bar-job with expected hash
          if [[ "${{ needs.bar-job.outputs.bar_secret_hash }}" == "${{ steps.generate-hashes.outputs.bar_expected_hash }}" ]]; then
            echo "‚úÖ BAR_SECRET verified correctly (hash matches)"
          else
            echo "‚ùå BAR_SECRET verification failed"
            exit 1
          fi

          if [[ "${{ needs.bar-job.outputs.bar_variable_value }}" == "BAR-VAR" ]]; then
            echo "‚úÖ BAR_VARIABLE verified correctly"
          else
            echo "‚ùå BAR_VARIABLE verification failed"
            exit 1
          fi

      - name: Summary
        run: echo "üéâ All environment secrets and variables verified successfully!"
